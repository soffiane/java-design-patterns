Domaine utilisation :
client a besoin de construire des objets complexes sans connaitre
leur implementation ou ayant plusieurs implementations
@startuml
abstract class Vendeur {
 +construit()
}
abstract ConstructeurLiasseVehicule {
+construitBonDeCommande()
+demandeImmatriculation()
+resultat()
}
class ConstructeurLiasseVehiculeHtml{
+construitBonDeCommande()
+demandeImmatriculation()
}
class ConstructeurLiasseVehiculePdf{
+construitBonDeCommande()
+demandeImmatriculation()
}
abstract class Liasse{
+ajouteDocument()
+imprime()
}
class LiasseHtml{
+ajouteDocument()
+imprime()
}
class LiassePdf{
+ajouteDocument()
+imprime()
}

ClientVehicule ..> Vendeur
ClientVehicule ..> ConstructeurLiasseVehiculeHtml
ClientVehicule ..> ConstructeurLiasseVehiculePdf
Vendeur ..> ConstructeurLiasseVehicule
ConstructeurLiasseVehicule <|--  ConstructeurLiasseVehiculeHtml
ConstructeurLiasseVehicule <|--  ConstructeurLiasseVehiculePdf
ConstructeurLiasseVehicule ..> Liasse
LiasseHtml --> Liasse
LiassePdf --> Liasse
ConstructeurLiasseVehicule --> "1 #liasse" Liasse

note "classe abstraite qui introduit les methodes permettant de \nconstruire les  differentes parties de la Liasse" as N1
note "Le but du pattern Builder est d'abstraire la construction d'objets \n complexes de leur implementation pour qu'un client puiise cr√©er\n ces objets complexes sans devoir connaitre les implementations\n il faut eviter de construire des objets avec pleins de parametres" as N2
ConstructeurLiasseVehicule .. N1
note "Classe abstraite qui definit le produit et est defnie dans les \nsous-classe concrete pour les differents types de produits : \n LiasseHtml et LiassePdf" as N3
N3 .. Liasse
@enduml